En el Controller

@RestController
@RequestMapping("/GarciaCardenas")
public class TicketController {
    @Autowired
    private ITicketService iT;

    @PostMapping
    public void insertar(@RequestBody TicketDTO ticketDTO){
        ModelMapper m=new ModelMapper();
        Ticket t=m.map(ticketDTO, Ticket.class);
        iT.insert(t);
    }

    @GetMapping
    public List<TicketDTO> listar(){
        return iT.list().stream().map(y->{
            ModelMapper m=new ModelMapper();
            return m.map(y, TicketDTO.class);
        }).collect(Collectors.toList());
    } //(Con esto hago el insertar y el listar todo)

    @DeleteMapping("/{id}")
    public void eliminar(@PathVariable("id") Integer id){
        stR.delete(id);
    } //En el interfaces public void delete(int id);
      //En el implements sR.deleteById(id);

    @PutMapping("/{id}")
    public void Actualizar (@PathVariable int id, @RequestBody StudentDTO studentDTO){
        ModelMapper m=new ModelMapper();
        Student s=m.map(studentDTO,Student.class);
        stR.Update(id,s);
    } //Actualizar todo
      //public void Update(int id, Student st); en el interfaces
       /*@Override
    	public void Update(int id, Student newSt) {
        Student studentfounded = sR.findById(id).orElseThrow();
        studentfounded.setGcDNI(newSt.getGcDNI());
        studentfounded.setGcName(newSt.getGcName());
        studentfounded.setGcLastName(newSt.getGcLastName());
        studentfounded.setGcEV1(newSt.getGcEV1());
        studentfounded.setGcEV2(newSt.getGcEV2());
        studentfounded.setGcNF(newSt.getGcNF());
        studentfounded.setGcApproved(newSt.isGcApproved());
        sR.save(studentfounded);
    	} En el implements/*
